<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LYHUB</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyhub.xyz/"/>
  <updated>2017-10-17T13:10:25.275Z</updated>
  <id>http://lyhub.xyz/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3编码小记</title>
    <link href="http://lyhub.xyz/Python3%E7%BC%96%E7%A0%81%E5%B0%8F%E8%AE%B0.html"/>
    <id>http://lyhub.xyz/Python3编码小记.html</id>
    <published>2017-06-17T03:05:45.000Z</published>
    <updated>2017-10-17T13:10:25.275Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;相比于Python 2 的编码，开发人员在Python 3 的编码上改进了许多。本篇将对Python 3 的编码作一个小记，并列出一些需要注意的地方。</p><hr><p>&emsp;&emsp;首先来看一下Python 3 的编码情况，分别在Windows和Linux下运行以下脚本：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import locale</div><div class="line">print (sys.getdefaultencoding())    #系统默认编码</div><div class="line">print (sys.getfilesystemencoding()) #文件系统编码</div><div class="line">print (locale.getdefaultlocale())   #系统当前编码</div><div class="line">print (sys.stdin.encoding)          #终端输入编码</div><div class="line">print (sys.stdout.encoding)         #终端输出编码</div></pre></td></tr></table></figure></p><p>Windows下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">utf-8</div><div class="line">utf-8</div><div class="line">(&apos;zh_CN&apos;, &apos;cp936&apos;)</div><div class="line">cp936</div><div class="line">cp936</div></pre></td></tr></table></figure><p>Linux下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">utf-8</div><div class="line">utf-8</div><div class="line">(&apos;zh_CN&apos;, &apos;utf-8&apos;)</div><div class="line">utf-8</div><div class="line">utf-8</div></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到，Python 3 的系统默认编码不在是ASCII，而是utf-8，我们在编写带有中文的源码文件时不再需要在开头加上<code># -*- coding：utf-8 -*-</code>。</p><hr><p>接下来看看Python 3 的字符串。<br>&emsp;&emsp;Python 3 中字符串分两种类型：<code>bytes</code> 和 <code>str</code>。</p><p><code>bytes</code>：某种编码（UTF-8，GBK等）类型的字节序列，普通字符串加上字母<code>b</code>作为前缀，就是表示<code>bytes</code>字符串了。它在内存中就是一串01。如果我们打印一个<code>bytes</code>字符串，我们可以看到它是以某种编码的形式呈现的，这是因为如果输出一串01，对于人来说读不懂，因此Python 3 在输出打印<code>bytes</code>字符串时做了调整，将其以自身编码的方式呈现出来。</p><p><code>str</code>：Unicode类型的字符串（<code>Unicode</code>编码），没有加<code>b</code>前缀的字符串。</p><hr><p>Python 3 的编码优化让我们不再经常碰到编码出错的问题，但还是有需要注意的地方。</p><p><strong>在Windows下<strong><em>在Windows下</em></strong>在Windows下</strong><br><em>（以下均在Windows下测试）</em></p><p>&emsp;&emsp;如果我们用<code>open(&#39;xxxx&#39;)</code>的形式打开一个文件，并且<code>read</code>文件的内容到一个<code>str</code>，那么该字符串的编码是文件的编码，而不是<code>Unicode</code>。比如说有一个<code>txt</code>文件是以<code>utf-8</code>编码的，我们用<code>open(&#39;xxxx&#39;)</code>的形式打开并将内容输出到cmd（gbk编码），那么将会出现乱码。或者将其写到另外一个文件，那么该文件也将是<code>utf-8</code>编码。</p><p>比如，新建一个<code>txt</code>文件，写上<code>编码测试</code>，<strong>并用notepad将其编码转换成utf-8无bom编码</strong>。<br>执行下面的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;xxxx.txt&apos;)</div><div class="line">s = f.read()</div><div class="line">print (type(s))</div><div class="line">print (s)</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;str&apos;&gt;</div><div class="line">缂栫爜娴嬭瘯</div></pre></td></tr></table></figure><p>&emsp;&emsp;如果我们在打开文件的时候告诉Python该文件的编码，那么它就能将读取到的内容顺利转换成<code>Unicode</code>编码，我们再进行输出操作就不会有乱码问题了。<br>代码修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;xxxx.txt&apos;, encoding=&apos;utf-8&apos;)</div><div class="line">s = f.read()</div><div class="line">print (type(s))</div><div class="line">print (s)</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;str&apos;&gt;</div><div class="line">编码测试</div></pre></td></tr></table></figure><p>&emsp;&emsp;还有一种方法，这里博主不推荐，不过还是说一下，以备不时之需。读取文件内容之后，用<code>要输出到的目标平台的编码</code>且<code>该编码支持文件内容的字符</code>的编码去把读取到内容的<code>str</code> <code>encode</code>成<code>bytes</code>，再用文件内容的原始编码去<code>decode</code>刚刚的<code>bytes</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;xxxx.txt&apos;)</div><div class="line">s = f.read().encode(&apos;gbk&apos;).decode(&apos;utf-8&apos;)</div><div class="line">print (type(s))</div><div class="line">print (s)</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;str&apos;&gt;</div><div class="line">编码测试</div></pre></td></tr></table></figure><hr><p>以上是读文件需要注意的地方，下面看看写文件方面。</p><p>如果我们用<code>open(&#39;xxxx&#39;, &#39;w&#39;)</code>的形式打开一个文件，向其写入内容，将会有如下的情况：</p><ul><li>写入的内容不是<code>Unicode</code>编码，且含有非ASCII字符（比如中文），那么文件的编码跟写入内容的原始编码一样。</li><li>写入的内容是<code>Unicode</code>编码，且含有非ASCII字符（比如中文），那么文件是<code>gbk</code>编码。</li></ul><p>如果我们用<code>open(&#39;xxxx&#39;, &#39;w&#39;, encoding=&#39;xxx&#39;)</code>的形式打开一个文件，向其写入内容，将会有如下的情况：</p><ul><li>写入的内容不是Unicode编码，<code>encoding</code>将不起作用，文件的编码跟写入内容的原始编码一样。</li><li>写入的内容是<code>Unicode</code>编码，且含有非ASCII字符（比如中文），那么文件是<code>xxx</code>编码</li></ul><p><strong>以上均在Windows上测试得到的，各位可以验证看看。</strong></p><hr><p>然而在Linux下，Python 3 跟Windows又有不一样的地方。<br>&emsp;&emsp;当用<code>open(&#39;xxxx&#39;)</code>的形式打开一个<code>gbk</code>编码文件，并<code>read()</code>里面内容的时候报错了：<br><code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xb1 in position 0: invalid start byte</code><br>&emsp;&emsp;而在Windows下用<code>open(&#39;xxxx&#39;)</code>的形式打开一个<code>utf-8</code>编码文件，并<code>read()</code>里面内容的时候并不会报错。</p><p>个人认为原因应该是：在Linux下Python 3 对于读取进来的内容，都会将其转换成<code>Unicode</code>编码，而不会保留其原来的编码，而在Windows下则会。</p><p>解决该问题的方法就是打开文件的时候指明其编码<code>open(&#39;xxxx&#39;, encoding=&#39;xxx&#39;)</code>。</p><p>编码建议：<br>&emsp;&emsp;<code>open</code>文件时指明文件的编码，保持<code>str</code>全都是<code>Unicode</code>编码。</p><hr><ul><li>以上若有错误之处还望各位看官指正，非常感谢。</li></ul><hr><p>参考<br><a href="https://www.crifan.com/summary_python_string_encoding_decoding_difference_and_comparation_python_2_x_str_unicode_vs_python_3_x_bytes_str/" target="_blank" rel="external">https://www.crifan.com/summary_python_string_encoding_decoding_difference_and_comparation_python_2_x_str_unicode_vs_python_3_x_bytes_str/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;相比于Python 2 的编码，开发人员在Python 3 的编码上改进了许多。本篇将对Python 3 的编码作一个小记，并列出一些需要注意的地方。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先来看一下Python 3 的编码情况，分别在Windows和Linux下运行以下脚本：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lyhub.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://lyhub.xyz/tags/Python/"/>
    
      <category term="编码" scheme="http://lyhub.xyz/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python2编码解析</title>
    <link href="http://lyhub.xyz/Python2%E7%BC%96%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>http://lyhub.xyz/Python2编码解析.html</id>
    <published>2017-06-02T13:05:20.000Z</published>
    <updated>2017-10-17T13:22:22.928Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Python 2 的编码问题一直是许多pythoner诟病的问题，给人以剪不断理还乱的感觉。本篇将介绍python2.x对字符编码是如何处理的，以及编程中遇到的一些编码问题，并给出解决方案。<br>&emsp;&emsp;<em>（本文存在一些博主个人见解的概念，非官方概念，请各位看官自行理解）。</em></p><hr><p>&emsp;&emsp;python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print sys.getdefaultencoding()    #系统默认编码</div><div class="line">print sys.getfilesystemencoding() #文件系统编码</div><div class="line">print locale.getdefaultlocale()   #系统当前编码</div><div class="line">print sys.stdin.encoding          #终端输入编码</div><div class="line">print sys.stdout.encoding         #终端输出编码</div></pre></td></tr></table></figure></p><p>将以上这段代码在windows与linux系统下分别运行，查看输出结果。</p><p>windows终端结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ascii</div><div class="line">mbcs</div><div class="line">(&apos;zh_CN&apos;, &apos;cp936&apos;)</div><div class="line">cp936</div><div class="line">cp936</div></pre></td></tr></table></figure></p><p>Linux终端结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ascii</div><div class="line">UTF-8</div><div class="line">(&apos;zh_CN&apos;, &apos;UTF-8&apos;)</div><div class="line">UTF-8</div><div class="line">UTF-8</div></pre></td></tr></table></figure><p>&emsp;&emsp;为什么会出现编码问题呢，很明显代码中出现编码不匹配的情况。如果你是纯英文编程，也不用处理到中文字符的，我想你大概也不会碰到编码的问题。但是在大天朝，怎么可能不涉及到中文呢。。。</p><p>最常遇到的错误就是：<br><code>UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe4 in position x: ordinal not in range(xxx)</code><br><code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position x-x: ordinal not in range(xxx)</code></p><hr><p>首先来讲一下大家都知道的 <code># -*- coding:utf-8 -*-</code><br>&emsp;&emsp;python 2 对于源代码的读取采用的是ASCII编码，所以你的源代码中有中文，在文件开头没写<code># -*- coding:utf-8 -*-</code> ，那么你的文件运行就会报错：<br><code>SyntaxError: Non-ASCII character xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></p><p><code># -*- coding:utf-8 -*-</code> 的作用就是告诉python读取源代码用UTF-8编码，而非ASCII编码。</p><blockquote><p><strong>注意</strong>：<code># -*- coding:utf-8 -*-</code>的作用仅仅是作用于源码读取而已。</p></blockquote><p>所以你的源码中带有中文，请在开头加上<code># -*- coding:utf-8 -*-</code>。</p><p>接下来我们来看看<code>sys.getdefaultencoding() #系统默认编码</code>。<br>&emsp;&emsp;在了解<code>sys.getdefaultencoding() #系统默认编码</code>之前，我们非常有必要了解在Python 2 中字符串是如何被处理的。</p><p>Python 2 中字符串分两类 <code>str</code> 和 <code>Unicode</code>。</p><p><code>str</code>：字符串前面 <strong>没有</strong> 加<code>u</code>的都是<code>str</code>类型，<code>str</code>有什么特点呢，如下：</p><ul><li>若没有对<code>str</code>执行额外的encode或decode，那么python解释器不会对它进行额外的编码解码处理。<br>&emsp;&emsp;比如该字符串是写在源码中，那么它的编码就是Python读取源码时用的编码。比如一个中文字符串<code>s = &#39;中文&#39;</code>，文件开头有<code># -*- coding:utf-8 -*-</code>，那么该中文字符串就是UTF-8编码。如果直接将该字符串写到文件中，其编码还是UTF-8编码，因为该过程没有对其进行任何encode或decode。<br>&emsp;&emsp;又如该字符串是从文件中读取的，比如在Windows中读取一个带有中文的文件，那么读取到的字符串一般就是GBK编码。若没有对它进行encode或decode操作，你可以直接将它输出而不会出现乱码。</li></ul><p>所以对于<code>str</code>类型，不对它执行额外的encode或decode操作，Python会一直保持它原始的编码。</p><p><code>Unicode</code>：字符串前面 <strong>有</strong> 加<code>u</code>的都是<code>Unicode</code>类型。<br>&emsp;&emsp;脱开Python来说，Unicode是一个能包含全世界所有字符符号的字符集，它既是一个字符集，也是一种编码方式。<br>&emsp;&emsp;在Python 2 中，Unicode是一个字符集，但“不作为一种输出编码方式”。</p><p>如何理解“不作为一种输出编码方式”。<br>&emsp;&emsp;我们处理字符串，最终都是要输出出来，包括显示，存储到文件等等。Python 2 对于<code>Unicode</code>类型，如果要将其输出，必须以某种编码encode再输出。这其中包括显示的跟隐式的。<br>&emsp;&emsp;比如说在Windows的控制台下输出<code>s = u&#39;中国&#39;</code>。我们知道Windows下cmd的默认编码是GBK，如果你在cmd的下执行脚本<code>print s</code>，则报错<br><code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-1: ordinal not in range(128)</code><br>因为Python 2 中Unicode不作为输出编码方式，当你<code>print</code>时，Python隐式地对<code>s</code>执行encode操作，而encode成哪一种编码呢，那就是<code>sys.getdefaultencoding()    #系统默认编码</code>这个系统默认编码了。Python 2 的默认系统编码是ASCII，而字符串中有中文，ASCII无法对中文编码，因此报错。</p><p>如何解决：</p><ul><li>在进行<code>print</code>时显示地进行<code>encode</code>，如：<code>print s.encode(&#39;GBK&#39;)</code>。</li><li>或者修改系统默认编码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;gbk&apos;)</div><div class="line"># Linux下为utf-8</div></pre></td></tr></table></figure><p>总结下<code>str</code>和<code>Unicode</code>：<br>&emsp;&emsp;Python中的<code>Unicode</code>我们可以把它理解为是一种底层处理编码，它是连接其他编码的桥梁，因为它能囊括全世界所有字符符号。比如你想把一个GBK编码的字符串转换成UTF-8编码，你可以先将其<code>decode</code>成<code>Unicode</code>，再从<code>Unicode</code>去<code>encode</code>成UTF-8，反之亦然。而<code>str</code>是一种除了Unicode编码之外的字符串类型，它所带的编码是可以用于输出操作，你可以对它进行<code>decode</code>操作成<code>Unicode</code>，也可以直接对它<code>encode</code>操作，python会隐式地在<code>encode</code>之前用系统编码对其进行<code>decode</code>成<code>Unicode</code>。</p><p>所以<code>sys.getdefaultencoding() #系统默认编码</code>的作用就是，当Python处理<code>Unicode</code>字符串的输出时，若发现没有显示地编码<code>encode</code>操作，则对该字符串以系统默认编码执行<code>encode</code>后输出。</p><blockquote><p><strong>提示</strong>：<br><code>decode</code>的作用是将其他编码的字符串转换成unicode编码，如<code>str1.decode(&#39;gb2312&#39;)</code>，表示将gb2312编码的字符串str1转换成unicode编码。<br><code>encode</code>的作用是将unicode编码转换成其他编码的字符串，如<code>str2.encode(&#39;gb2312&#39;)</code>，表示将unicode编码的字符串str2转换成gb2312编码。</p></blockquote><hr><p>讲了这么多，我们来实际操作看看吧。以下操作均在Windows下进行。</p><p>新建一个<code>test.txt</code>，在里面输入中文，比如：编码测试，直接保存退出。<br>运行以下脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;test.txt&apos;)</div><div class="line">s = f.read()</div><div class="line">print s</div><div class="line">print type(s)</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编码测试</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><p>可以看到，这个过程没有涉及任何编码解码操作，正常输出TXT里的内容。这是因为读进来的文件内容是GBK编码，cmd也是GBK编码，因此能够正常显示。</p><p>打开<code>test.txt</code>文件，将其另存为以UTF-8编码的形式。</p><blockquote><p><strong>注意</strong>：不要用记事本转成UTF-8，用notepad打开并在编码那里转成以UTF-8无BOM编码。记事本转成UTF-8带BOM会出错。这是UTF-8中带不带BOM的问题，这里先不说。</p></blockquote><p>再次运行上面的脚本<br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">锘跨紪鐮佹祴璇?</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><p>可以看到，<code>编码测试</code>变成<code>锘跨紪鐮佹祴璇?</code>。这是因为读进来的文件内容是UTF-8编码，与cmd的编码不一样，所以不能正常显示。</p><p>如何解决：</p><ul><li>将读取进来的内容<code>decode</code>成<code>Unicode</code>再<code>encode</code>成GBK</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;test.txt&apos;)</div><div class="line">s = f.read()</div><div class="line">print s.decode(&apos;utf-8&apos;).encode(&apos;GBK&apos;)</div><div class="line">print type(s)</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>运行，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编码测试</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><p>正常显示。</p><hr><p>再看下面这个脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">a=u&quot;编码测试&quot;  #定义一个Unicode字符串</div><div class="line">print type(a)</div><div class="line">print a</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;type &apos;unicode&apos;&gt;</div><div class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-3: ordinal not in range(128)</div></pre></td></tr></table></figure><p><code>a</code>字符串是<code>Unicode</code>字符串，对它执行<code>print</code>输出时，Python隐式地对它执行<code>encode</code>操作，<code>encode</code>编码默认是ASCII编码，不能编码中文，因此出现以上的错误。</p><p>如何解决：</p><ul><li>修改系统编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;gbk&apos;)</div></pre></td></tr></table></figure><p>在前面加上以上三条语句，将系统编码设置成gbk（Linux下设置成utf-8）<br>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;gbk&apos;)</div><div class="line"></div><div class="line">a=u&quot;编码测试&quot;  #定义一个变量，为Unicode编码</div><div class="line">print type(a)</div><div class="line">print a</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;type &apos;unicode&apos;&gt;</div><div class="line">编码测试</div></pre></td></tr></table></figure><ul><li>另外一种方法就是进行显示编码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=u&quot;编码测试&quot;  #定义一个变量，为Unicode编码</div><div class="line">print type(a)</div><div class="line">print a.encode(&apos;gbk&apos;)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;type &apos;unicode&apos;&gt;</div><div class="line">编码测试</div></pre></td></tr></table></figure><p>正常输出。</p><hr><p>再看非Unicode的情形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">a=&quot;编码测试&quot;  #定义一个变量，默认为Str，utf-8编码</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">缂栫爜娴嬭瘯</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><p>因为<code># -*- coding:utf-8 -*-</code>，所以<code>a</code>以<code>utf-8</code>编码，直接输出到控制台，由于编码不匹配所以出现上面的内容。</p><p>如何解决：</p><ul><li>显示地进行解码编码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">a=&quot;编码测试&quot;  #定义一个变量，默认为Str，utf-8编码</div><div class="line">print a.decode(&apos;utf-8&apos;).encode(&apos;gbk&apos;)</div><div class="line">print type(a)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编码测试</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><ul><li>或者把系统编码设置成utf-8，那么可以直接对<code>a</code>进行encode操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class="line"></div><div class="line">a=&quot;编码测试&quot;  #定义一个变量，默认为Str，utf-8编码</div><div class="line">print a.encode(&apos;gbk&apos;) # 这个过程Python隐式地先执行decode(&apos;utf-8&apos;)操作</div><div class="line">print type(a)</div></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：直接对<code>str</code>进行<code>encode</code>的话，Python会先对其进行隐式的<code>decode</code>操作，所用的编码是系统编码。</p></blockquote><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编码测试</div><div class="line">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure><hr><p>&emsp;&emsp;所以对于Python 2 中的编码，我们只要抓住几个点就完全可以应对各种编码情况。</p><ul><li>弄清楚字符串从哪里来，编码是什么，经过什么处理，要输出到什么平台，文件，其编码要求是什么。</li><li><code>Unicode</code>是Python 2 “底层”的编码，用于处理的编码，协助<code>str</code>进行编码转换。输出<code>Unicode</code>必须经过encode操作，可显示的，也可隐式的。隐式的话需要注意此时的系统编码。</li><li><code>str</code>是Python 2 “上层”的编码，用于处理、<strong>输出</strong>的编码，通过<code>Unicode</code>的协助完成编码转换。</li><li><code>str</code> decode成<code>Unicode</code></li><li><code>Unicode</code> encode成<code>str</code></li><li>注意Python 2 中 显示的 及 隐式的 decode、encode操作。</li></ul><p>最后</p><p>python 2 编码建议：</p><ul><li>请尽量在Linux系统上编程，linux下较windows，编码问题良好很多。</li><li>python代码内部请全部使用<code>unicode</code>编码，在获取外部内容时，先decode为<code>unicode</code>，向外输出时再encode为<code>Str</code></li><li>在定义变量或者正则时，也定义<code>unicode</code>字符，如<code>a = u”中文”</code>；<code>res=r””+u”正则”</code>。</li></ul><hr><ul><li>以上若有错误之处还望各位看官指正，非常感谢。</li></ul><hr><p>参考：<br><a href="https://thief.one/2017/02/16/%E8%A7%A3%E5%86%B3Python2-x%E7%BC%96%E7%A0%81%E4%B9%8B%E6%AE%87/" target="_blank" rel="external">https://thief.one/2017/02/16/%E8%A7%A3%E5%86%B3Python2-x%E7%BC%96%E7%A0%81%E4%B9%8B%E6%AE%87/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Python 2 的编码问题一直是许多pythoner诟病的问题，给人以剪不断理还乱的感觉。本篇将介绍python2.x对字符编码是如何处理的，以及编程中遇到的一些编码问题，并给出解决方案。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;em&gt;（本文存在一些博主个人见解的概念，非官方概念，请各位看官自行理解）。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lyhub.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://lyhub.xyz/tags/Python/"/>
    
      <category term="编码" scheme="http://lyhub.xyz/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式——re模块部分解析</title>
    <link href="http://lyhub.xyz/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%94%E2%80%94re%E6%A8%A1%E5%9D%97%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90.html"/>
    <id>http://lyhub.xyz/Python正则表达式——re模块部分解析.html</id>
    <published>2017-05-24T09:35:53.000Z</published>
    <updated>2017-10-20T09:52:43.154Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。它是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。因此它通常被用来检索、替换那些符合某个模式(规则)的文本。<br>&emsp;&emsp;Python的正则表达式处理由<strong><code>re</code></strong>模块提供，本篇将讲解<code>re</code>模块中经常被用到的几个函数的基本用法。<br><a id="more"></a><br>&emsp;&emsp;<em>以下操作均在Python 3 GUI 中进行。</em></p><hr><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>Python的正则表达式处理由<strong><code>re</code></strong>模块提供，我们先来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;正则表达式&apos;)</div><div class="line">result = re.search(pattern, s)</div><div class="line">print (type(result))</div><div class="line">print (result)</div><div class="line">print (result.gruop(0))</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;_sre.SRE_Match&apos;&gt;</div><div class="line">&lt;_sre.SRE_Match object; span=(6, 11), match=&apos;正则表达式&apos;&gt;</div><div class="line">&apos;正则表达式&apos;</div></pre></td></tr></table></figure><p>&emsp;&emsp;以上演示了在一个字符串中寻找某个子串。其中<code>re.compile</code>的作用编译正则表达式模式为一个正则表达式对象，而该正则表达式模式为括号中的<code>&#39;正则表达式&#39;</code>。</p><h4 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h4><p>&emsp;&emsp;<code>re.search</code>是在字符串<code>s</code>中找到第一个与正则表达式对象<code>pattern</code>匹配的串后停止并返回结果，这意味着如果主串中有两个匹配的子串，<code>re.search</code>找到并返回的总是第一个出现的。<br>&emsp;&emsp;从上面可以看到，<code>re.search</code>返回的结果类型是<code>_sre.SRE_Match</code>，<em>（若匹配不到，结果则是None）</em>，直接打印该结果会得到两个比较有用的信息：匹配到的串及该串在主串中的位置。如果仅仅想要匹配的串，则需要用到<code>_sre.SRE_Match</code>类下的<code>group</code>。至于<code>group</code>我们稍后会将解。</p><blockquote><p><strong>注意</strong>，上面例子还有另外两种写法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;正则表达式&apos;)</div><div class="line">result = pattern.search(s)</div></pre></td></tr></table></figure><p>以及</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">result = re.search(&apos;正则表达式&apos;, s)</div></pre></td></tr></table></figure><blockquote><p>此处仅作一个补充，接下来所有的例子均采用最上面第一个例子的写法。</p></blockquote><p>&emsp;&emsp;上面的例子讲到<code>re.search</code>返回的结果，该结果有一个<code>group</code>的方法，这个到底怎么用呢，看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;((正则)(表达))式&apos;) #这里并不是匹配括号，而是生成group的作用，若要匹配括号，要在括号前面加上反斜杠\，或在字符串前面加上r。</div><div class="line">ss = re.search(pattern, s)</div><div class="line">print (ss.group(0))</div><div class="line">print (ss.group(1))</div><div class="line">print (ss.group(2))</div><div class="line">print (ss.group(3))</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">正则表达式</div><div class="line">正则表达</div><div class="line">正则</div><div class="line">表达</div></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到，如果<code>re.search</code>成功匹配，其结果有一个默认的<code>group</code>，就是<code>0</code>，它的结果是整个匹配串<code>正则表达式</code>。至于有没有<code>group(1)</code> <code>group(2)</code>…，就看你的模式有没有用括号进行<code>group</code>划分。</p><blockquote><p>&emsp;&emsp;<code>group</code>的匹配顺序是由外到里，由左到右。先是外层括号，后是内层括号，同级括号的顺序从左到右。</p></blockquote><p>在上面的例子中，<code>group(1)</code>对应的是<code>正则表达</code>，<code>group(2)</code>对应的是<code>正则</code>，<code>group(3)</code>对应的是<code>表达</code>。</p><h4 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h4><p><code>re.search</code>基本上就这样，再来看看与它相似的<code>re.match</code>。<br>看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;Py(thon)&apos;)</div><div class="line">result = re.match(pattern, s)</div><div class="line">print (type(result))</div><div class="line">print (result)</div><div class="line">print (result.gruop(0))</div><div class="line">print (result.gruop(1))</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;_sre.SRE_Match&apos;&gt;</div><div class="line">&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;Python&apos;&gt;</div><div class="line">&apos;Python&apos;</div><div class="line">&apos;thon&apos;</div></pre></td></tr></table></figure><p>可以看到，和<code>re.search</code>返回的结果类型是一样的。</p><p>不同之处在于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;正则表达式&apos;)</div><div class="line">result = re.match(pattern, s)</div><div class="line">print (result)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">None</div></pre></td></tr></table></figure><p>也就是说，<code>re.match</code>是从字符串的开头就开始匹配的，它不会像<code>re.search</code>一样在串里寻找匹配项。</p><h4 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h4><p>最后看一下也经常用到的<code>re.findall</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式，第二个Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;正则表达式&apos;)</div><div class="line">result = re.findall(pattern, s)</div><div class="line">print (type(result))</div><div class="line">print (ss)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;list&apos;&gt;</div><div class="line">[&apos;正则表达式&apos;, &apos;正则表达式&apos;]</div></pre></td></tr></table></figure><p>可以看到，<code>re.findall</code>返回的结果是<code>list</code>，里面包含所有匹配的子串。</p><p>再进一步，看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = &apos;Python正则表达式，第二个Python正则表达式&apos;</div><div class="line">pattern = re.compile(&apos;(正则)表达式&apos;) # 注意此处模式里加入了group</div><div class="line">result = re.findall(pattern, s)</div><div class="line">print (type(result))</div><div class="line">print (ss)</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;list&apos;&gt;</div><div class="line">[&apos;正则&apos;, &apos;正则&apos;]</div></pre></td></tr></table></figure><p>对于<code>re.findall</code>，如果匹配模式里有<code>group</code>，则返回的结果不再是<code>group(0)</code>，而是该模式下的<code>group(1)</code> <code>group(2)</code> <code>group(3)</code>……</p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>&emsp;&emsp;以上介绍了<code>re</code>模块中经常被用到的4个函数的基本用法，掌握了这4个函数的基本用法基本上就可以处理Python中绝大多数有关于用正则表达式处理字符串的问题了。</p><hr><ul><li>以上若有错误之处还望各位看官指正，非常感谢。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。它是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。因此它通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;br&gt;&amp;emsp;&amp;emsp;Python的正则表达式处理由&lt;strong&gt;&lt;code&gt;re&lt;/code&gt;&lt;/strong&gt;模块提供，本篇将讲解&lt;code&gt;re&lt;/code&gt;模块中经常被用到的几个函数的基本用法。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lyhub.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://lyhub.xyz/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://lyhub.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="字符串处理" scheme="http://lyhub.xyz/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式——书写正则表达式</title>
    <link href="http://lyhub.xyz/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%94%E2%80%94%E4%B9%A6%E5%86%99%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>http://lyhub.xyz/Python正则表达式——书写正则表达式.html</id>
    <published>2017-05-20T02:40:18.000Z</published>
    <updated>2017-10-20T09:52:56.356Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇摘抄于网络，非作任何商业用途，若存在版权问题，请联系博主。</p></blockquote><hr><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>&emsp;&emsp;正则表达式是可以匹配文本片段的模式。最简单的正则表达式就是普通字符串，可以匹配其自身。换句话说，正则表达式<code>&#39;python&#39;</code>可以匹配字串<code>&#39;python&#39;</code>。你可以用这种匹配行为搜索文本中的模式，并且用计算后的值替换特定模式，或者将文本进行分段。<br><a id="more"></a></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>&emsp;&emsp;正则表达式可以匹配多于一个的字符串，你可以使用一些特殊字符创建这类模式。比如点号<code>.</code>可以匹配任何字符（除了换行符），所以正则表达式<code>&#39;.ython&#39;</code>可以匹配字符串’<code>python&#39;</code>和<code>&#39;jython&#39;</code>。它还能匹配<code>&#39;qython&#39;</code>或者<code>&#39; +ython&#39;</code>（第一个字母是空格），但是不会匹配<code>&#39;cpython&#39;</code>或者<code>&#39;ython&#39;</code>这样的字符串，因为点号只能匹配一个字母，而不是两个或零个。因为它可以匹配“任何字符串”（除换行符外的任何单个字符），点号就称为通配符。</p><h4 id="对特殊字符进行转义"><a href="#对特殊字符进行转义" class="headerlink" title="对特殊字符进行转义"></a>对特殊字符进行转义</h4><p>&emsp;&emsp;你需要知道，在正则表达式中如果将特殊字符作为普通字符使用会遇到问题，这很重要。比如，假设需要匹配字符串<code>&#39;python.org&#39;</code>，直接用<code>&#39;python.org&#39;</code>模式可以么？这么做是可以的，但是这样也会匹配’<code>pythonzorg&#39;</code>，这可不是所期望的结果（点号可以匹配除换行符外的任何字符，还记得吧？）。为了让特殊字符表现得像普通字符一样，需要对它进行转义，进行转义所做的在它前面加上反斜线。因此，在本例中可以使用<code>&#39;python\\.org&#39;</code>，这样就只会匹配’<code>python.org&#39;</code>了。</p><blockquote><p><strong>注意</strong>：为了获得<code>re</code>模块所需的单个反斜线，我们要在字符串中使用两个反斜线——为了通过解释器进行转义。这样就需要两个级别的转义了 ：（1）通过解释器转义；（2）通过re模块转义。<br>（事实上，有些情况下可以使用单个反斜线，让解释器自动进行转义，但是别依赖这种功能。如果厌烦了使用双斜线，那么可以使用原始字符串，比如<code>r&#39;python.org&#39;</code>。）</p></blockquote><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>&emsp;&emsp;匹配任意字符可能很有用，但有些时候你需要更多的控制权。你可以使用中括号括住字符串来创建字符集。字符集可以匹配它所包括的任意字符，所以<code>&#39;[pj]ython&#39;</code>能够匹配<code>&#39;python&#39;</code>和<code>&#39;jython&#39;</code>，而非其他内容。你可以使用范围，比如<code>&#39;[a-z]&#39;</code>能够（按字母顺序）匹配a到z的任意一个字符，还可以通过一个接一个的方式将范围联合起来使用，比如<code>&#39;[a-zA-Z0-9]&#39;</code>能够匹配任意大小写字母和数字（注意字符集只能匹配一个这样的字符）。<br>&emsp;&emsp;为了反转字符集，可以在开头使用<code>^</code>字符，比如<code>&#39;[^abc]&#39;</code>可以匹配任何除了<code>a</code>、<code>b</code>和<code>c</code>之外的字符。</p><h4 id="选择符和子模式"><a href="#选择符和子模式" class="headerlink" title="选择符和子模式"></a>选择符和子模式</h4><p>&emsp;&emsp;在字符串的每个字符都各不相同的情况下，字符集是很好用的，但如果只想匹配字符串<code>&#39;python&#39;</code>和<code>&#39;perl&#39;</code>呢？你就不能使用字符集或者通配符来指定某个特定的模式了。取而代之的是用于选择项的特殊字符：管道符<code>|</code>。因此，所需的模式可以写成<code>&#39;python|perl&#39;</code>。<br>&emsp;&emsp;但是，有些时候不需要对整个模式使用选择运算符——只是模式的一部分。这时可以使用圆括号括起需要的部分，或称子模式。前例可以写成<code>&#39;p(ython|erl)&#39;</code>。（注意，术语子模式也适用于单个字符。）</p><h4 id="可选项和重复子模式"><a href="#可选项和重复子模式" class="headerlink" title="可选项和重复子模式"></a>可选项和重复子模式</h4><p>&emsp;&emsp;在子模式后面加上问号，它就变成了可选项。它可能出现在匹配字符串中，但并非必需的。<br>例如，下面这个（稍微有点难懂的）模式：<br><code>r&#39;(http://)?(www\.)?python\org&#39;</code><br>只能匹配下列字符串（而不会匹配其他的）：<br><code>&#39;http://www.python.org&#39;</code><br><code>&#39;http://python.org&#39;</code><br><code>&#39;www.python.org&#39;</code><br><code>&#39;python.org&#39;</code><br>对于上述例子，下面这些内容是值得注意的：</p><ul><li>对点号进行了转义，防止它被作为通配符使用；</li><li>使用原始字符串减少所需反斜线的数量；</li><li>每个可选子模式都用圆括号括起；</li><li>可选子模式出现与否均可，而且互相独立。</li></ul><p>问号表示子模式可以出现一次或者根本不出现。下面这些运算符允许子模式重复多次：</p><ul><li><code>(pattern)*</code>：允许模式重复0次或多次；</li><li><code>(pattern)+</code>：允许模式重复1次或多次；</li><li><code>(pattern){m,n}</code>：允许模式重复m至n次。</li></ul><p>例如，<code>r&#39;w*\.python\.org&#39;</code>，会匹配<code>&#39;www.python.org&#39;</code>，也会匹配<code>&#39;.python.org&#39;</code>、<code>&#39;ww.python.org&#39;</code>和<code>&#39;wwwwwww.python.org&#39;</code>。类似地，<code>r&#39;w+\.python\.org&#39;</code>匹配<code>&#39;w.python.org&#39;</code>但不匹配<code>&#39;.python.org&#39;</code>，而<code>r&#39;w{3,4}\.python\.org&#39;</code>只匹配<code>&#39;www.python.org&#39;</code>和<code>&#39;wwww.python.org&#39;</code>。</p><h4 id="字符串的开始和结尾"><a href="#字符串的开始和结尾" class="headerlink" title="字符串的开始和结尾"></a>字符串的开始和结尾</h4><p>&emsp;&emsp;目前为止，所出现的模式匹配都是针对整个字符串的，但是也能寻找匹配模式的子字符串，比如字符串<code>&#39;www.python.org&#39;</code>中的子字符串<code>&#39;www&#39;</code>会能够匹配模式<code>&#39;w+&#39;</code>。在寻找这样的子字符串时，确定子字符串位于整个字符串的开始还是结尾是很有用的。比如，只想在字符串的开头而不是其他位置匹配<code>&#39;ht+p&#39;</code>，那么就可以使用脱字符<code>^</code>标记开始：<code>&#39;^ht+p&#39;</code>会匹配<code>&#39;http://python.org&#39;</code>(以及<code>&#39;htttttttttp://python.org&#39;</code>），但是不匹配<code>&#39;www.python.org&#39;</code>。类似地，字符串结尾用美元符号<code>$</code>标识。</p><blockquote><p><strong>注意</strong>：有关正则表达式运算符的完整列表，请参见Python类参考的4.2,1节的内容（<a href="http://python.org/doc/lib/re-syntax.html）。" target="_blank" rel="external">http://python.org/doc/lib/re-syntax.html）。</a></p></blockquote><h4 id="参考表"><a href="#参考表" class="headerlink" title="参考表"></a>参考表</h4><p><img src="/upload_image/20160412165147753.png" alt=""></p><hr><p>&emsp;&emsp;如果不知道如何应用，只知道如何书写正则表达式还是不够的。<code>re</code>模块包含一些有用的操作正则表达式的函数。请移步<a href="http://lyhub.xyz/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%94%E2%80%94re%E6%A8%A1%E5%9D%97%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90.html">Python正则表达式——re模块部分解析</a>进一步了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇摘抄于网络，非作任何商业用途，若存在版权问题，请联系博主。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;什么是正则表达式&quot;&gt;&lt;a href=&quot;#什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式&quot;&gt;&lt;/a&gt;什么是正则表达式&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;正则表达式是可以匹配文本片段的模式。最简单的正则表达式就是普通字符串，可以匹配其自身。换句话说，正则表达式&lt;code&gt;&amp;#39;python&amp;#39;&lt;/code&gt;可以匹配字串&lt;code&gt;&amp;#39;python&amp;#39;&lt;/code&gt;。你可以用这种匹配行为搜索文本中的模式，并且用计算后的值替换特定模式，或者将文本进行分段。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lyhub.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://lyhub.xyz/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://lyhub.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="字符串处理" scheme="http://lyhub.xyz/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客——结束篇</title>
    <link href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E7%BB%93%E6%9D%9F%E7%AF%87.html"/>
    <id>http://lyhub.xyz/Hexo搭建博客——结束篇.html</id>
    <published>2017-05-16T05:00:16.000Z</published>
    <updated>2017-10-13T19:18:16.384Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;作为本教程的结束篇，我也废话不多说，直接上折腾过程。</p><hr><h4 id="为站点添加腾讯公益404页面"><a href="#为站点添加腾讯公益404页面" class="headerlink" title="为站点添加腾讯公益404页面"></a>为站点添加腾讯公益404页面</h4><p>&emsp;&emsp;我们知道当访问网站中不存在的内容都会跳转到404页面，Hexo也提供了该功能。<br>&emsp;&emsp;<strong>方法</strong>：在主题文件下的source文件夹创建404.html页面，html代码：<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</div><div class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</div><div class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</div><div class="line">          homePageName=&quot;回到我的主页&quot;&gt;</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：在本地模式下调试不了该页面，要推送上GitHub才能看到该页面。<br>如果说你推送上GitHub后还是调试不到该页面，其中一个原因可能是：没有绑定域名。没有绑定域名的话是无法创建404 页面，只会跳转到github默认404 page，绑定域名的话可使用腾讯公益404页面。还有一个注意的点是：<code>http://github.io</code>全部都是https，而js里面的链接有的是http，谷歌浏览器可能会拦截这个跳转，这个大家也要注意一下</p></blockquote><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>&emsp;&emsp;博客已经搭建好，能通过github的域名访问，但总归还是用自己的域名比较舒服。因此我们需要设置将自己的域名绑定到github这个博客项目上。<br>&emsp;&emsp;去域名提供商那里注册个域名。至于去那个域名提供商博主就不推荐了，大家自个网上看。</p><ul><li>在域名提供商那设置：<ul><li>添加2条A记录：<br><code>@—&gt;192.30.252.154</code><br><code>@—&gt;192.30.252.153</code></li><li>添加一条CNAME记录：<br><code>CNAME—&gt;XXXX.github.io</code></li></ul></li><li>博客添加CNAME文件<br>配置完域名解析后，进入博客目录，在source目录下新建CNAME文件（没有后缀名），写入域名，如：lyhub.xyz</li><li>运行：<code>hexo g</code></li><li>运行：<code>hexo d</code></li></ul><p>&emsp;&emsp;这个有些情况下需要等待时间才会生效，所以如果访问自个域名不成功的话不用急，多等一下也许就能上了。</p><h4 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h4><p>&emsp;&emsp;seo优化对于网站是否能被搜索引擎快速收录有很大帮助，因此适当做一些seo还是有必要的，可参考：<a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="external">http://www.arao.me/2015/hexo-next-theme-optimize-seo/</a></p><hr><p>&emsp;&emsp;到这我们的 <strong>Hexo搭建博客</strong> 教程就告一段落了，以上也是博主搭建本博客的记录，在此分享给大家，希望能够帮助到各位看官。</p><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="external">https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a><br><a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="external">http://www.arao.me/2015/hexo-next-theme-optimize-seo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;作为本教程的结束篇，我也废话不多说，直接上折腾过程。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;为站点添加腾讯公益404页面&quot;&gt;&lt;a href=&quot;#为站点添加腾讯公益404页面&quot; class=&quot;headerlink&quot; title=&quot;为站点添加腾讯公益404页面&quot;&gt;&lt;/a&gt;为站点添加腾讯公益404页面&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们知道当访问网站中不存在的内容都会跳转到404页面，Hexo也提供了该功能。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;方法&lt;/strong&gt;：在主题文件下的source文件夹创建404.html页面，html代码：&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://lyhub.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lyhub.xyz/tags/Hexo/"/>
    
      <category term="博客" scheme="http://lyhub.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客——完善与美化</title>
    <link href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%AE%8C%E5%96%84%E4%B8%8E%E7%BE%8E%E5%8C%96.html"/>
    <id>http://lyhub.xyz/Hexo搭建博客——完善与美化.html</id>
    <published>2017-05-12T07:02:17.000Z</published>
    <updated>2017-10-13T19:17:05.291Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;完成<a href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html">上一篇文章</a>的各个步骤操作之后我们已经有了一个基本的博客雏形，那么接下让我们一起来看看如何完善及美化这个雏形，从而得到一个成型的博客。</p><h3 id="站点完善"><a href="#站点完善" class="headerlink" title="站点完善"></a>站点完善</h3><p>&emsp;&emsp;一般博客都会有 <strong>归档、分类、标签、搜索</strong> 这几个标配的功能，而且主题配置文件一般都有预设且默认开启这几个菜单项<em>（看一下你现在的博客是不是有这几个菜单项，若没有则打开主题配置文件将对应菜单项前面的#号去掉，搜索这个菜单项先不用管它）</em>。不过看一下你的博客的这几个选项，都没有正确的跳转。所以接下来我们来完善这一部分的内容。<br><a id="more"></a></p><h4 id="添加「归档」页面"><a href="#添加「归档」页面" class="headerlink" title="添加「归档」页面"></a>添加「归档」页面</h4><p>归档页面已经默认为我们设置好了，所以这个不用管它。</p><h4 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h4><p>&emsp;&emsp;新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签测试文章</div><div class="line">tags:</div><div class="line">  - Testing</div><div class="line">  - Another Tag</div><div class="line">---</div></pre></td></tr></table></figure><blockquote><p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE" target="_blank" rel="external">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类。</p></blockquote><ul><li>新建页面<br>在终端窗口下，定位到 blog 站点目录下。使用 hexo new page 新建一个页面，命名为 tags：<code>hexo new page tags</code></li></ul><ul><li>设置页面类型<br>打开source文件夹下的tags文件夹，编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure><ul><li>修改菜单<br>（这一步如果在文章开头那已经操作了就不用）<br>在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">禁用评论示例</div><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h4><p>&emsp;&emsp;新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 分类测试文章</div><div class="line">categories: Testing</div><div class="line">---</div></pre></td></tr></table></figure><blockquote><p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE" target="_blank" rel="external">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类。</p></blockquote><ul><li>新建页面<br>在终端窗口下，定位到 blog 站点目录下。使用 hexo new page 新建一个页面，命名为 categories：<code>hexo new page categories</code></li><li>设置页面类型<br>打开source文件夹下的categories文件夹，编辑刚新建的页面，将页面的类型设置为 categories，主题将自动为这个页面显示分类。页面内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure><ul><li>修改菜单<br>（这一步如果在文章开头那已经操作了就不用）<br>在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  tags: /categories</div></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">禁用评论示例</div><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure><hr><p>&emsp;&emsp;现在已经完成了标签跟分类的设置，只要我们在写文章的时候按照Hexo 的分类与标签文档的规则为文章添加分类和标签，Hexo框架会自动帮我们处理。现在你可以多复制几篇文章，给它们打上不一样的分类和标签，然后重启服务，看看这两个菜单项的跳转是否正确。</p><hr><h4 id="配置「搜索」项"><a href="#配置「搜索」项" class="headerlink" title="配置「搜索」项"></a>配置「搜索」项</h4><p>&emsp;&emsp;Hexo下有几种搜索方式，本博客用的是Hexo的Local Search。<br>&emsp;&emsp;Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。<br><strong>安装步骤</strong></p><ul><li>安装 hexo-generator-search<br>在站点的根目录下执行以下命令：<code>npm install hexo-generator-search --save</code></li><li>安装 hexo-generator-searchdb<br>在站点的根目录下执行以下命令：<code>npm install hexo-generator-searchdb --save</code></li><li>启用搜索<br>编辑站点配置文件，新增以下内容到任意位置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure><ul><li>编辑 主题配置文件，找到<code>Local search</code>条目：<br>将<code>Local search</code>条目下的<code>enable</code>对应的值设置为<code>true</code></li></ul><p>&emsp;&emsp;保存并重启服务你会发现菜单栏多了一个搜索项，点击它就可以进行站内搜索。<br>&emsp;&emsp;至于其它的搜索方式，大家可以上网搜教程，这里就不再赘述。然后，看到这相信小伙伴也知道了对于菜单栏，我们还可以自定义一些自己想要的项，这个我在这也不赘述ಠᴗಠ，大家自个找找教程琢磨琢磨。</p><h4 id="评论和分享"><a href="#评论和分享" class="headerlink" title="评论和分享"></a>评论和分享</h4><h5 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h5><p>&emsp;&emsp;next已经预设好了很多第三方评论，在主题配置文件了搜索Third Party Services Settings，下面有很多第三方评论。<br>&emsp;&emsp;就本站而言，用的是友言。</p><ul><li>首先去友言官网注册个账号，在获取代码那里找到你的uid。</li><li>在主题配置文件中找到youyan条目，删除youyan_uid前面的注释，将其值改成你的uid</li></ul><h5 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h5><p>&emsp;&emsp;友言评论也配套了jiathis分享<br>在主题配置文件中搜索并将jiathis条目修改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jiathis:</div><div class="line">  uid: 你的uid</div><div class="line">add_this_id: 你的uid</div></pre></td></tr></table></figure><p>OK，保存，重启服务，打开一篇文章，在文章的底部可以看到分享按钮和评论框了。</p><hr><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><h4 id="文章内插入图片"><a href="#文章内插入图片" class="headerlink" title="文章内插入图片"></a>文章内插入图片</h4><p>在文章中写入: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](/upload_image/1.jpg)</div></pre></td></tr></table></figure><p>　　然后进入<code>themes-主题名-source-upload_image</code>目录下(自己创建)，将图片放到这个目录下，就可以了。</p><blockquote><p><strong>说明</strong>：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。</p></blockquote><h4 id="文章中添加居中引用模块文章"><a href="#文章中添加居中引用模块文章" class="headerlink" title="文章中添加居中引用模块文章"></a>文章中添加居中引用模块文章</h4><p>Markdown中填写如下：<br><code>&lt;blockquote class=&quot;blockquote-center&quot;&gt;XXXXXXXXXXXXXXXXXX&lt;/blockquote&gt;</code></p><h4 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h4><p>在目录 hexo-theme-next/layout/_macro/下添加 my-copyright.swig：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;% if page.copyright %&#125;</div><div class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</div><div class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</div><div class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt; </div><div class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</div><div class="line">    clipboard.on(&apos;success&apos;, $(function()&#123;</div><div class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</div><div class="line">        swal(&#123;   </div><div class="line">          title: &quot;&quot;,   </div><div class="line">          text: &apos;复制成功&apos;,   </div><div class="line">          html: false,</div><div class="line">          timer: 500,   </div><div class="line">          showConfirmButton: false</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;));  </div><div class="line">&lt;/script&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><p>在目录hexo-theme-next/source/css/_common/components/post/下添加my-post-copyright.styl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">.my_post_copyright &#123;</div><div class="line">  width: 85%;</div><div class="line">  max-width: 45em;</div><div class="line">  margin: 2.8em auto 0;</div><div class="line">  padding: 0.5em 1.0em;</div><div class="line">  border: 1px solid #d3d3d3;</div><div class="line">  font-size: 0.93rem;</div><div class="line">  line-height: 1.6em;</div><div class="line">  word-break: break-all;</div><div class="line">  background: rgba(255,255,255,0.4);</div><div class="line">&#125;</div><div class="line">.my_post_copyright p&#123;margin:0;&#125;</div><div class="line">.my_post_copyright span &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 5.2em;</div><div class="line">  color: #b5b5b5;</div><div class="line">  font-weight: bold;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .raw &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 5em;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a &#123;</div><div class="line">  color: #808080;</div><div class="line">  border-bottom:0;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a:hover &#123;</div><div class="line">  color: #a3d2a3;</div><div class="line">  text-decoration: underline;</div><div class="line">&#125;</div><div class="line">.my_post_copyright:hover .fa-clipboard &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .post-url:hover &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 1em;</div><div class="line">  +mobile()&#123;display:none;&#125;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path:hover &#123;</div><div class="line">  color: #808080;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改hexo-theme-next/layout/_macro/post.swig，在代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include &apos;wechat-subscriber.swig&apos; %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>之前添加增加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include &apos;my-copyright.swig&apos; %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>修改hexo-theme-next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &quot;my-post-copyright&quot;</div></pre></td></tr></table></figure><p>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: </div><div class="line">date: </div><div class="line">tags: </div><div class="line">categories: </div><div class="line">copyright: true</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="自定义hexo-new生成md文件的选项"><a href="#自定义hexo-new生成md文件的选项" class="headerlink" title="自定义hexo new生成md文件的选项"></a>自定义hexo new生成md文件的选项</h4><p>在/scaffolds/post.md文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories: </div><div class="line">copyright: true</div><div class="line">permalink: 01</div><div class="line">top: 0</div><div class="line">password:</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h4><p>打开/themes/hexo-theme-next/layout/_partials/head.swig文件，在maximum-scale=1”/&gt;后添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt;</div></pre></td></tr></table></figure><p>但是，默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .pace .pace-progress &#123;</div><div class="line">        background: #1E92FB; /*进度条颜色*/</div><div class="line">        height: 3px;</div><div class="line">    &#125;</div><div class="line">    .pace .pace-progress-inner &#123;</div><div class="line">         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/</div><div class="line">    &#125;</div><div class="line">    .pace .pace-activity &#123;</div><div class="line">        border-top-color: #1E92FB;    /*上边框颜色*/</div><div class="line">        border-left-color: #1E92FB;    /*左边框颜色*/</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><h4 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h4><p>打开\themes\hexo-theme-next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 主页文章添加阴影效果</div><div class="line"> .post &#123;</div><div class="line">   margin-top: 60px;</div><div class="line">   margin-bottom: 60px;</div><div class="line">   padding: 25px;</div><div class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</div><div class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h4 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h4><p>&emsp;&emsp;修改模板/themes/hexo-theme-next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h4><p>&emsp;&emsp;将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>&emsp;&emsp;找到文件 themes\hexo-theme-next\source\css_custom\custom.styl ，添加如下 css 样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.post-body p a &#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #0477ab;</div><div class="line">    text-decoration: underline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h4><p>&emsp;&emsp;首先将你的头像图片放到主题文件夹下的source的images文件夹下<br>&emsp;&emsp;在主题配置文件中找到Sidebar Avatar条目，将该条目下的avatar值修改成<code>/images/xxxx.jpg</code></p><h4 id="侧边栏RSS订阅设置"><a href="#侧边栏RSS订阅设置" class="headerlink" title="侧边栏RSS订阅设置"></a>侧边栏RSS订阅设置</h4><p>在站点根目录下运行：<code>npm install --save hexo-generator-feed</code><br>在站点配置文件里添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">plugins: hexo-generate-feed</div></pre></td></tr></table></figure><p>在主题配置文件里找到<code>rss</code>条目，修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss: /atom.</div></pre></td></tr></table></figure><p>配置完之后运行：<code>hexo g</code></p><h4 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h4><p>具体实现方法：<br>在路径 \themes\hexo-theme-next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &#123;% if not is_index %&#125;</div><div class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束，感谢您的阅读-------------&lt;/div&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个DIV）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>然后打开主题配置文件（_config.yml),在末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 文章末尾添加“本文结束”标记</div><div class="line">passage_end_tag:</div><div class="line">  enabled: true</div></pre></td></tr></table></figure><h4 id="定制Hexo-Next底部logo栏"><a href="#定制Hexo-Next底部logo栏" class="headerlink" title="定制Hexo-Next底部logo栏"></a>定制Hexo-Next底部logo栏</h4><p><a href="http://www.jianshu.com/p/4fbc57269f1b" target="_blank" rel="external">http://www.jianshu.com/p/4fbc57269f1b</a></p><h4 id="设置「阅读全文」-amp-设置页面文章的篇数"><a href="#设置「阅读全文」-amp-设置页面文章的篇数" class="headerlink" title="设置「阅读全文」&amp; 设置页面文章的篇数"></a>设置「阅读全文」&amp; 设置页面文章的篇数</h4><blockquote><p>Next常见问题：<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">http://theme-next.iissnan.com/faqs.html</a></p></blockquote><hr><p><strong><em>提醒</em></strong>：<em>在更新博客内容时，最好先在本地调试完毕后（hexo server），再推送到github上。</em></p><hr><p>&emsp;&emsp;至此，我们的博客算是真正意义上的成型了。如果说你比较熟悉前端的知识，那你可以进一步折腾博客的布局、配色、UI图标等等，深度定制个人专属博客。或者你想为博客新添加页面，菜单项的，网上也有很多教程可以看。在下面的参考链接中有很多有趣的东西给我们的博客增色，大家可以去瞧瞧。<br>&emsp;&emsp;我们的教程也参不多可以结束了，不过由于篇幅的原因，另外几个关于站点的完善我放在另一篇文章里，<a href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E7%BB%93%E6%9D%9F%E7%AF%87.html">Hexo搭建博客——结束篇</a>，有兴趣的同学可以继续折腾折腾。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="external">https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a><br><a href="http://www.jianshu.com/p/4fbc57269f1b" target="_blank" rel="external">http://www.jianshu.com/p/4fbc57269f1b</a><br><a href="http://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="external">http://www.jianshu.com/p/f054333ac9e6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;完成&lt;a href=&quot;http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html&quot;&gt;上一篇文章&lt;/a&gt;的各个步骤操作之后我们已经有了一个基本的博客雏形，那么接下让我们一起来看看如何完善及美化这个雏形，从而得到一个成型的博客。&lt;/p&gt;
&lt;h3 id=&quot;站点完善&quot;&gt;&lt;a href=&quot;#站点完善&quot; class=&quot;headerlink&quot; title=&quot;站点完善&quot;&gt;&lt;/a&gt;站点完善&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一般博客都会有 &lt;strong&gt;归档、分类、标签、搜索&lt;/strong&gt; 这几个标配的功能，而且主题配置文件一般都有预设且默认开启这几个菜单项&lt;em&gt;（看一下你现在的博客是不是有这几个菜单项，若没有则打开主题配置文件将对应菜单项前面的#号去掉，搜索这个菜单项先不用管它）&lt;/em&gt;。不过看一下你的博客的这几个选项，都没有正确的跳转。所以接下来我们来完善这一部分的内容。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://lyhub.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lyhub.xyz/tags/Hexo/"/>
    
      <category term="博客" scheme="http://lyhub.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://lyhub.xyz/Hexo搭建博客.html</id>
    <published>2017-05-10T02:55:01.000Z</published>
    <updated>2017-10-13T19:13:10.394Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Hexo，就同<a href="https://hexo.io/" target="_blank" rel="external">官网</a>上的标题写着：A fast, simple &amp; powerful blog framework 。的确，在博主开始搭建本博客到配置细节到博客上线，确实是体验到fast、simple、powerful，简简单单几个语句就搭好了整个博客的基本框架。网上有关于Hexo的教程也很多，遇到什么问题一搜就能解决。官方给出的文档也很容易看，配合各种主题，插件等搭建一个炫酷的、高定制的个人博客完全不在话下。<br><a id="more"></a></p><h4 id="必要软件的安装"><a href="#必要软件的安装" class="headerlink" title="必要软件的安装"></a>必要软件的安装</h4><ul><li>下载安装git</li><li>下载node.js并安装（默认会安装npm）</li><li>下载安装hexo。方法：打开cmd 运行 npm install hexo-cli -g</li></ul><h4 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h4><p>&emsp;&emsp;按照Hexo官网的方法，cmd下切换到你想要放置博客的目录下，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo init blog# 生成blog文件夹，博客所有的东西都放在该目录下</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line">hexo server# 运行程序，访问本地localhost:4000可以看到博客已经搭建成功</div></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：在运行<code>hexo server</code>之前最好先运行<code>netstat -ano</code>查看 4000 端口是否被占用。若被占用了改用<code>hexo s -p xxxx</code>，xxxx是端口号，比如可以用<code>hexo s -p 8000</code>，之后 访问本地 localhost:8000 可以看到博客已经搭建成功。</p></blockquote><h4 id="将本地博客和GitHub关联"><a href="#将本地博客和GitHub关联" class="headerlink" title="将本地博客和GitHub关联"></a>将本地博客和GitHub关联</h4><p>&emsp;&emsp;在Github上创建名字为<code>XXXX.github.io</code>的项目，XXXX为自己的github用户名。打开本地的blog文件夹项目内的_config.yml配置文件，将其中的type设置为git 。</p><pre><code>deploy:  type: git  repository: https://github.com/XXX/XXX.github.io.git  branch: master</code></pre><p>运行：<code>npm install hexo-deployer-git –save</code><br>运行：<code>hexo g</code>（本地生成静态文件）<br>运行：<code>hexo d</code>（将本地静态文件推送至Github）<br>之后，打开浏览器，访问<code>http://XXXX.github.io</code></p><h4 id="更新博客文章"><a href="#更新博客文章" class="headerlink" title="更新博客文章"></a>更新博客文章</h4><p>&emsp;&emsp;在blog目录下执行：<code>hexo new &quot;第一篇文章&quot;</code>，会在source-&gt;_posts文件夹内生成一个.md文件。</p><ul><li>编辑该文件（遵循Markdown规则）</li><li>修改起始字段（基本不用修改，后续会讲到这些条目）<ul><li>title 文章的标题</li><li>date 创建日期 （文件的创建日期 ）</li><li>updated 修改日期 （ 文件的修改日期）</li><li>comments 是否开启评论 true</li><li>tags 标签</li><li>categories 分类</li><li>permalink url中的名字（文件名）</li></ul></li><li>编写正文内容（遵循Markdown规则）</li><li>运行hexo g 生成本地静态文件（Public目录）</li><li>运行hexo deploy 将本地静态文件推送至github（hexo d）</li><li>访问<code>http://XXXX.github.io</code>，看看成果</li></ul><p>&emsp;&emsp;至此，我相信你已经大概清楚了Hexo框架如何写文章以及更新GitHub仓库的博客文章。<br>&emsp;&emsp;接下来是一小部分关于Hexo一些完善操作和个性化定制内容。</p><h4 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h4><h5 id="定制基本信息"><a href="#定制基本信息" class="headerlink" title="定制基本信息"></a>定制基本信息</h5><p>&emsp;&emsp;在根目录下的_config.yml（站点配置文件）文件中，可以修改标题，作者等信息。打开编辑该文件，注意：每一个值的冒号后面都有一个半角空格！</p><blockquote><p>未生效的写法：title:nMask的博客<br>能生效的写法：title:[空格]nMask的博客</p></blockquote><p>里面还有其他的条目等你熟悉这个框架后再慢慢去琢磨。</p><h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><p>&emsp;&emsp;Hexo下的主题有很多，网上搜一下一大把。<br>&emsp;&emsp;cmd进入blog下的themes目录，下载主题 (以next主题为例)：</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next.git</code></pre><p>&emsp;&emsp;打开blog的__config.yml（站点配置文件）文件，将themes修改为hexo-theme-next（下载到的主题文件夹的名字）<br>运行：<code>hexo g</code> 和<code>hexo d</code><br>访问<code>http://XXXX.github.io</code>，可以看到网页主题已经发生了改变。</p><blockquote><p>关于hexo-theme-next主题下的一些个性化配置，参考：<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">Next主题配置</a></p></blockquote><h5 id="设置主题语言"><a href="#设置主题语言" class="headerlink" title="设置主题语言"></a>设置主题语言</h5><p>&emsp;&emsp;大部分主题默认是使用英语的，如何修改成自己需要的语言。<br>&emsp;&emsp;每一个主题文件夹下都有一个langues文件夹，里面存放着该主题支持的语言。打开这些文件你可以发现其实这里面都是对主题配置文件里的条目的对应翻译<em>（因此如果对某个翻译不满意，你自己可以进行修改）</em>。复制一个你需要的语言的文件名<em>（不包括后缀名）</em>，比如zh-Hans，然后打开blog下的_config_yml（站点配置文件）文件，找到language条目，将其对应的值修改成zh-Hans。保存，重启服务就可以在本地看到效果，之后再推送到GitHub上（hexo g ， hexo d）</p><h5 id="添加或删除菜单项"><a href="#添加或删除菜单项" class="headerlink" title="添加或删除菜单项"></a>添加或删除菜单项</h5><p>&emsp;&emsp;打开blog的theme目录，进入hexo-theme-next目录，编辑_config_yml（主题配置文件）文件，找到menu:字段，在该字段下有几个预设菜单项，有的用#注释掉。你可以根据自己的需求进行调整。</p><hr><p>&emsp;&emsp;经过这一小部分的调整，一个真正属于你的博客的雏形算是基本形成了。</p><p>&emsp;&emsp;至此，我想你多多少少还是有点成就感吧。不错，稍微享受一下之后，接下来还要继续完善这个博客，包括菜单选项的跳转以及主题的美化。</p><blockquote><p>请看<a href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%AE%8C%E5%96%84%E4%B8%8E%E7%BE%8E%E5%8C%96.html">Hexo搭建博客——完善与美化</a></p></blockquote><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="external">https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Hexo，就同&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;上的标题写着：A fast, simple &amp;amp; powerful blog framework 。的确，在博主开始搭建本博客到配置细节到博客上线，确实是体验到fast、simple、powerful，简简单单几个语句就搭好了整个博客的基本框架。网上有关于Hexo的教程也很多，遇到什么问题一搜就能解决。官方给出的文档也很容易看，配合各种主题，插件等搭建一个炫酷的、高定制的个人博客完全不在话下。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://lyhub.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lyhub.xyz/tags/Hexo/"/>
    
      <category term="博客" scheme="http://lyhub.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>开启Hexo博客之旅</title>
    <link href="http://lyhub.xyz/%E5%BC%80%E5%90%AFHexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85.html"/>
    <id>http://lyhub.xyz/开启Hexo博客之旅.html</id>
    <published>2017-05-06T06:48:12.000Z</published>
    <updated>2017-10-13T19:04:49.695Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博客用的是Hexo+Next主题+Github部署，具体可参考:　<a href="http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html">Hexo搭建博客</a></p><p>&emsp;&emsp;本博客主要用于记录及分享个人技术总结以及心得，后续或许有其他非技术方面的内容分享，若有合作或者疑问可发送邮件到：liyonggdut@163.com<br><a id="more"></a><br>&emsp;&emsp;关于友情链接，可在下方留言，欢迎互相添加友情链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博客用的是Hexo+Next主题+Github部署，具体可参考:　&lt;a href=&quot;http://lyhub.xyz/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html&quot;&gt;Hexo搭建博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本博客主要用于记录及分享个人技术总结以及心得，后续或许有其他非技术方面的内容分享，若有合作或者疑问可发送邮件到：liyonggdut@163.com&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://lyhub.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lyhub.xyz/tags/Hexo/"/>
    
      <category term="原创" scheme="http://lyhub.xyz/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
